// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crestmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crestmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crestmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "test/topmessage.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crestmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crestmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crestmessage_2eproto;
class CrestMessage;
class CrestMessageDefaultTypeInternal;
extern CrestMessageDefaultTypeInternal _CrestMessage_default_instance_;
class CrestMessage_HashEntry_DoNotUse;
class CrestMessage_HashEntry_DoNotUseDefaultTypeInternal;
extern CrestMessage_HashEntry_DoNotUseDefaultTypeInternal _CrestMessage_HashEntry_DoNotUse_default_instance_;
class NestMessage;
class NestMessageDefaultTypeInternal;
extern NestMessageDefaultTypeInternal _NestMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CrestMessage* Arena::CreateMaybeMessage<::CrestMessage>(Arena*);
template<> ::CrestMessage_HashEntry_DoNotUse* Arena::CreateMaybeMessage<::CrestMessage_HashEntry_DoNotUse>(Arena*);
template<> ::NestMessage* Arena::CreateMaybeMessage<::NestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CrestMessage_EnumFruits : int {
  CrestMessage_EnumFruits_APPLE = 0,
  CrestMessage_EnumFruits_PEAR = 1,
  CrestMessage_EnumFruits_PEACH = 2,
  CrestMessage_EnumFruits_BANANA = 3,
  CrestMessage_EnumFruits_STRAWBERRY = 4,
  CrestMessage_EnumFruits_CHOCOLATE = 5,
  CrestMessage_EnumFruits_CrestMessage_EnumFruits_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CrestMessage_EnumFruits_CrestMessage_EnumFruits_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CrestMessage_EnumFruits_IsValid(int value);
constexpr CrestMessage_EnumFruits CrestMessage_EnumFruits_EnumFruits_MIN = CrestMessage_EnumFruits_APPLE;
constexpr CrestMessage_EnumFruits CrestMessage_EnumFruits_EnumFruits_MAX = CrestMessage_EnumFruits_CHOCOLATE;
constexpr int CrestMessage_EnumFruits_EnumFruits_ARRAYSIZE = CrestMessage_EnumFruits_EnumFruits_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CrestMessage_EnumFruits_descriptor();
template<typename T>
inline const std::string& CrestMessage_EnumFruits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CrestMessage_EnumFruits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CrestMessage_EnumFruits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CrestMessage_EnumFruits_descriptor(), enum_t_value);
}
inline bool CrestMessage_EnumFruits_Parse(
    const std::string& name, CrestMessage_EnumFruits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CrestMessage_EnumFruits>(
    CrestMessage_EnumFruits_descriptor(), name, value);
}
// ===================================================================

class CrestMessage_HashEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CrestMessage_HashEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CrestMessage_HashEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CrestMessage_HashEntry_DoNotUse();
  CrestMessage_HashEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CrestMessage_HashEntry_DoNotUse& other);
  static const CrestMessage_HashEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CrestMessage_HashEntry_DoNotUse*>(&_CrestMessage_HashEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "CrestMessage.HashEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_crestmessage_2eproto);
    return ::descriptor_table_crestmessage_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class CrestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CrestMessage) */ {
 public:
  inline CrestMessage() : CrestMessage(nullptr) {};
  virtual ~CrestMessage();

  CrestMessage(const CrestMessage& from);
  CrestMessage(CrestMessage&& from) noexcept
    : CrestMessage() {
    *this = ::std::move(from);
  }

  inline CrestMessage& operator=(const CrestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrestMessage& operator=(CrestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrestMessage& default_instance();

  enum PickOneCase {
    kRed = 23,
    kBlue = 24,
    PICKONE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrestMessage* internal_default_instance() {
    return reinterpret_cast<const CrestMessage*>(
               &_CrestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CrestMessage& a, CrestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CrestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrestMessage* New() const final {
    return CreateMaybeMessage<CrestMessage>(nullptr);
  }

  CrestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrestMessage& from);
  void MergeFrom(const CrestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CrestMessage";
  }
  protected:
  explicit CrestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_crestmessage_2eproto);
    return ::descriptor_table_crestmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef CrestMessage_EnumFruits EnumFruits;
  static constexpr EnumFruits APPLE =
    CrestMessage_EnumFruits_APPLE;
  static constexpr EnumFruits PEAR =
    CrestMessage_EnumFruits_PEAR;
  static constexpr EnumFruits PEACH =
    CrestMessage_EnumFruits_PEACH;
  static constexpr EnumFruits BANANA =
    CrestMessage_EnumFruits_BANANA;
  static constexpr EnumFruits STRAWBERRY =
    CrestMessage_EnumFruits_STRAWBERRY;
  static constexpr EnumFruits CHOCOLATE =
    CrestMessage_EnumFruits_CHOCOLATE;
  static inline bool EnumFruits_IsValid(int value) {
    return CrestMessage_EnumFruits_IsValid(value);
  }
  static constexpr EnumFruits EnumFruits_MIN =
    CrestMessage_EnumFruits_EnumFruits_MIN;
  static constexpr EnumFruits EnumFruits_MAX =
    CrestMessage_EnumFruits_EnumFruits_MAX;
  static constexpr int EnumFruits_ARRAYSIZE =
    CrestMessage_EnumFruits_EnumFruits_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EnumFruits_descriptor() {
    return CrestMessage_EnumFruits_descriptor();
  }
  template<typename T>
  static inline const std::string& EnumFruits_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EnumFruits>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EnumFruits_Name.");
    return CrestMessage_EnumFruits_Name(enum_t_value);
  }
  static inline bool EnumFruits_Parse(const std::string& name,
      EnumFruits* value) {
    return CrestMessage_EnumFruits_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHashFieldNumber = 3,
    kTopMFieldNumber = 4,
    kNestMFieldNumber = 5,
    kIdFieldNumber = 1,
    kFruitFieldNumber = 21,
    kRedFieldNumber = 23,
    kBlueFieldNumber = 24,
  };
  // repeated string name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // map<int32, string> hash = 3;
  int hash_size() const;
  private:
  int _internal_hash_size() const;
  public:
  void clear_hash();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_hash() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_hash();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      hash() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_hash();

  // .TopMessage topM = 4;
  bool has_topm() const;
  private:
  bool _internal_has_topm() const;
  public:
  void clear_topm();
  const ::TopMessage& topm() const;
  ::TopMessage* release_topm();
  ::TopMessage* mutable_topm();
  void set_allocated_topm(::TopMessage* topm);
  private:
  const ::TopMessage& _internal_topm() const;
  ::TopMessage* _internal_mutable_topm();
  public:
  void unsafe_arena_set_allocated_topm(
      ::TopMessage* topm);
  ::TopMessage* unsafe_arena_release_topm();

  // .NestMessage nestM = 5;
  bool has_nestm() const;
  private:
  bool _internal_has_nestm() const;
  public:
  void clear_nestm();
  const ::NestMessage& nestm() const;
  ::NestMessage* release_nestm();
  ::NestMessage* mutable_nestm();
  void set_allocated_nestm(::NestMessage* nestm);
  private:
  const ::NestMessage& _internal_nestm() const;
  ::NestMessage* _internal_mutable_nestm();
  public:
  void unsafe_arena_set_allocated_nestm(
      ::NestMessage* nestm);
  ::NestMessage* unsafe_arena_release_nestm();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .CrestMessage.EnumFruits fruit = 21;
  void clear_fruit();
  ::CrestMessage_EnumFruits fruit() const;
  void set_fruit(::CrestMessage_EnumFruits value);
  private:
  ::CrestMessage_EnumFruits _internal_fruit() const;
  void _internal_set_fruit(::CrestMessage_EnumFruits value);
  public:

  // bool red = 23;
  private:
  bool _internal_has_red() const;
  public:
  void clear_red();
  bool red() const;
  void set_red(bool value);
  private:
  bool _internal_red() const;
  void _internal_set_red(bool value);
  public:

  // bool blue = 24;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  bool blue() const;
  void set_blue(bool value);
  private:
  bool _internal_blue() const;
  void _internal_set_blue(bool value);
  public:

  void clear_PickOne();
  PickOneCase PickOne_case() const;
  // @@protoc_insertion_point(class_scope:CrestMessage)
 private:
  class _Internal;
  void set_has_red();
  void set_has_blue();

  inline bool has_PickOne() const;
  inline void clear_has_PickOne();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CrestMessage_HashEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > hash_;
  ::TopMessage* topm_;
  ::NestMessage* nestm_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int fruit_;
  union PickOneUnion {
    PickOneUnion() {}
    bool red_;
    bool blue_;
  } PickOne_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_crestmessage_2eproto;
};
// -------------------------------------------------------------------

class NestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NestMessage) */ {
 public:
  inline NestMessage() : NestMessage(nullptr) {};
  virtual ~NestMessage();

  NestMessage(const NestMessage& from);
  NestMessage(NestMessage&& from) noexcept
    : NestMessage() {
    *this = ::std::move(from);
  }

  inline NestMessage& operator=(const NestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestMessage& operator=(NestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NestMessage* internal_default_instance() {
    return reinterpret_cast<const NestMessage*>(
               &_NestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NestMessage& a, NestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NestMessage* New() const final {
    return CreateMaybeMessage<NestMessage>(nullptr);
  }

  NestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NestMessage& from);
  void MergeFrom(const NestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NestMessage";
  }
  protected:
  explicit NestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_crestmessage_2eproto);
    return ::descriptor_table_crestmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crestmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CrestMessage

// int32 id = 1;
inline void CrestMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrestMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrestMessage::id() const {
  // @@protoc_insertion_point(field_get:CrestMessage.id)
  return _internal_id();
}
inline void CrestMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CrestMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CrestMessage.id)
}

// repeated string name = 2;
inline int CrestMessage::_internal_name_size() const {
  return name_.size();
}
inline int CrestMessage::name_size() const {
  return _internal_name_size();
}
inline void CrestMessage::clear_name() {
  name_.Clear();
}
inline std::string* CrestMessage::add_name() {
  // @@protoc_insertion_point(field_add_mutable:CrestMessage.name)
  return _internal_add_name();
}
inline const std::string& CrestMessage::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& CrestMessage::name(int index) const {
  // @@protoc_insertion_point(field_get:CrestMessage.name)
  return _internal_name(index);
}
inline std::string* CrestMessage::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:CrestMessage.name)
  return name_.Mutable(index);
}
inline void CrestMessage::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CrestMessage.name)
  name_.Mutable(index)->assign(value);
}
inline void CrestMessage::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CrestMessage.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void CrestMessage::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CrestMessage.name)
}
inline void CrestMessage::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CrestMessage.name)
}
inline std::string* CrestMessage::_internal_add_name() {
  return name_.Add();
}
inline void CrestMessage::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CrestMessage.name)
}
inline void CrestMessage::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CrestMessage.name)
}
inline void CrestMessage::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CrestMessage.name)
}
inline void CrestMessage::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CrestMessage.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CrestMessage::name() const {
  // @@protoc_insertion_point(field_list:CrestMessage.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CrestMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:CrestMessage.name)
  return &name_;
}

// map<int32, string> hash = 3;
inline int CrestMessage::_internal_hash_size() const {
  return hash_.size();
}
inline int CrestMessage::hash_size() const {
  return _internal_hash_size();
}
inline void CrestMessage::clear_hash() {
  hash_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
CrestMessage::_internal_hash() const {
  return hash_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
CrestMessage::hash() const {
  // @@protoc_insertion_point(field_map:CrestMessage.hash)
  return _internal_hash();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
CrestMessage::_internal_mutable_hash() {
  return hash_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
CrestMessage::mutable_hash() {
  // @@protoc_insertion_point(field_mutable_map:CrestMessage.hash)
  return _internal_mutable_hash();
}

// .TopMessage topM = 4;
inline bool CrestMessage::_internal_has_topm() const {
  return this != internal_default_instance() && topm_ != nullptr;
}
inline bool CrestMessage::has_topm() const {
  return _internal_has_topm();
}
inline const ::TopMessage& CrestMessage::_internal_topm() const {
  const ::TopMessage* p = topm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TopMessage*>(
      &::_TopMessage_default_instance_);
}
inline const ::TopMessage& CrestMessage::topm() const {
  // @@protoc_insertion_point(field_get:CrestMessage.topM)
  return _internal_topm();
}
inline void CrestMessage::unsafe_arena_set_allocated_topm(
    ::TopMessage* topm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topm_);
  }
  topm_ = topm;
  if (topm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CrestMessage.topM)
}
inline ::TopMessage* CrestMessage::release_topm() {
  auto temp = unsafe_arena_release_topm();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TopMessage* CrestMessage::unsafe_arena_release_topm() {
  // @@protoc_insertion_point(field_release:CrestMessage.topM)
  
  ::TopMessage* temp = topm_;
  topm_ = nullptr;
  return temp;
}
inline ::TopMessage* CrestMessage::_internal_mutable_topm() {
  
  if (topm_ == nullptr) {
    auto* p = CreateMaybeMessage<::TopMessage>(GetArena());
    topm_ = p;
  }
  return topm_;
}
inline ::TopMessage* CrestMessage::mutable_topm() {
  // @@protoc_insertion_point(field_mutable:CrestMessage.topM)
  return _internal_mutable_topm();
}
inline void CrestMessage::set_allocated_topm(::TopMessage* topm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(topm_);
  }
  if (topm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topm)->GetArena();
    if (message_arena != submessage_arena) {
      topm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topm, submessage_arena);
    }
    
  } else {
    
  }
  topm_ = topm;
  // @@protoc_insertion_point(field_set_allocated:CrestMessage.topM)
}

// .NestMessage nestM = 5;
inline bool CrestMessage::_internal_has_nestm() const {
  return this != internal_default_instance() && nestm_ != nullptr;
}
inline bool CrestMessage::has_nestm() const {
  return _internal_has_nestm();
}
inline void CrestMessage::clear_nestm() {
  if (GetArena() == nullptr && nestm_ != nullptr) {
    delete nestm_;
  }
  nestm_ = nullptr;
}
inline const ::NestMessage& CrestMessage::_internal_nestm() const {
  const ::NestMessage* p = nestm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NestMessage*>(
      &::_NestMessage_default_instance_);
}
inline const ::NestMessage& CrestMessage::nestm() const {
  // @@protoc_insertion_point(field_get:CrestMessage.nestM)
  return _internal_nestm();
}
inline void CrestMessage::unsafe_arena_set_allocated_nestm(
    ::NestMessage* nestm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nestm_);
  }
  nestm_ = nestm;
  if (nestm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CrestMessage.nestM)
}
inline ::NestMessage* CrestMessage::release_nestm() {
  auto temp = unsafe_arena_release_nestm();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NestMessage* CrestMessage::unsafe_arena_release_nestm() {
  // @@protoc_insertion_point(field_release:CrestMessage.nestM)
  
  ::NestMessage* temp = nestm_;
  nestm_ = nullptr;
  return temp;
}
inline ::NestMessage* CrestMessage::_internal_mutable_nestm() {
  
  if (nestm_ == nullptr) {
    auto* p = CreateMaybeMessage<::NestMessage>(GetArena());
    nestm_ = p;
  }
  return nestm_;
}
inline ::NestMessage* CrestMessage::mutable_nestm() {
  // @@protoc_insertion_point(field_mutable:CrestMessage.nestM)
  return _internal_mutable_nestm();
}
inline void CrestMessage::set_allocated_nestm(::NestMessage* nestm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nestm_;
  }
  if (nestm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nestm);
    if (message_arena != submessage_arena) {
      nestm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestm, submessage_arena);
    }
    
  } else {
    
  }
  nestm_ = nestm;
  // @@protoc_insertion_point(field_set_allocated:CrestMessage.nestM)
}

// .CrestMessage.EnumFruits fruit = 21;
inline void CrestMessage::clear_fruit() {
  fruit_ = 0;
}
inline ::CrestMessage_EnumFruits CrestMessage::_internal_fruit() const {
  return static_cast< ::CrestMessage_EnumFruits >(fruit_);
}
inline ::CrestMessage_EnumFruits CrestMessage::fruit() const {
  // @@protoc_insertion_point(field_get:CrestMessage.fruit)
  return _internal_fruit();
}
inline void CrestMessage::_internal_set_fruit(::CrestMessage_EnumFruits value) {
  
  fruit_ = value;
}
inline void CrestMessage::set_fruit(::CrestMessage_EnumFruits value) {
  _internal_set_fruit(value);
  // @@protoc_insertion_point(field_set:CrestMessage.fruit)
}

// bool red = 23;
inline bool CrestMessage::_internal_has_red() const {
  return PickOne_case() == kRed;
}
inline void CrestMessage::set_has_red() {
  _oneof_case_[0] = kRed;
}
inline void CrestMessage::clear_red() {
  if (_internal_has_red()) {
    PickOne_.red_ = false;
    clear_has_PickOne();
  }
}
inline bool CrestMessage::_internal_red() const {
  if (_internal_has_red()) {
    return PickOne_.red_;
  }
  return false;
}
inline void CrestMessage::_internal_set_red(bool value) {
  if (!_internal_has_red()) {
    clear_PickOne();
    set_has_red();
  }
  PickOne_.red_ = value;
}
inline bool CrestMessage::red() const {
  // @@protoc_insertion_point(field_get:CrestMessage.red)
  return _internal_red();
}
inline void CrestMessage::set_red(bool value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:CrestMessage.red)
}

// bool blue = 24;
inline bool CrestMessage::_internal_has_blue() const {
  return PickOne_case() == kBlue;
}
inline void CrestMessage::set_has_blue() {
  _oneof_case_[0] = kBlue;
}
inline void CrestMessage::clear_blue() {
  if (_internal_has_blue()) {
    PickOne_.blue_ = false;
    clear_has_PickOne();
  }
}
inline bool CrestMessage::_internal_blue() const {
  if (_internal_has_blue()) {
    return PickOne_.blue_;
  }
  return false;
}
inline void CrestMessage::_internal_set_blue(bool value) {
  if (!_internal_has_blue()) {
    clear_PickOne();
    set_has_blue();
  }
  PickOne_.blue_ = value;
}
inline bool CrestMessage::blue() const {
  // @@protoc_insertion_point(field_get:CrestMessage.blue)
  return _internal_blue();
}
inline void CrestMessage::set_blue(bool value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:CrestMessage.blue)
}

inline bool CrestMessage::has_PickOne() const {
  return PickOne_case() != PICKONE_NOT_SET;
}
inline void CrestMessage::clear_has_PickOne() {
  _oneof_case_[0] = PICKONE_NOT_SET;
}
inline CrestMessage::PickOneCase CrestMessage::PickOne_case() const {
  return CrestMessage::PickOneCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NestMessage

// int32 id = 1;
inline void NestMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestMessage::id() const {
  // @@protoc_insertion_point(field_get:NestMessage.id)
  return _internal_id();
}
inline void NestMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void NestMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NestMessage.id)
}

// string name = 2;
inline void NestMessage::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NestMessage::name() const {
  // @@protoc_insertion_point(field_get:NestMessage.name)
  return _internal_name();
}
inline void NestMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NestMessage.name)
}
inline std::string* NestMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NestMessage.name)
  return _internal_mutable_name();
}
inline const std::string& NestMessage::_internal_name() const {
  return name_.Get();
}
inline void NestMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NestMessage::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NestMessage.name)
}
inline void NestMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:NestMessage.name)
}
inline void NestMessage::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NestMessage.name)
}
inline std::string* NestMessage::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NestMessage::release_name() {
  // @@protoc_insertion_point(field_release:NestMessage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NestMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NestMessage.name)
}
inline std::string* NestMessage::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NestMessage.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NestMessage::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NestMessage.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CrestMessage_EnumFruits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CrestMessage_EnumFruits>() {
  return ::CrestMessage_EnumFruits_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crestmessage_2eproto
